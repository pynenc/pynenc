[tool.poetry]
name = "pynenc"
version = "0.1.0"
description = "A task management system for complex distributed orchestration"
authors = ["Jose Diaz"]
license = "MIT License"
readme = "README.md"
homepage = "https://pynenc.org"
documentation = "https://docs.pynenc.org"
repository = "https://github.com/pynenc/pynenc"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
packages = [
    { include = "pynenc" },
    { include = "pynmon" },
    { include = "pynenc_tests" }
]


[tool.poetry.scripts]
pynenc = 'pynenc.__main__:main'

# Plugin entry points for extending PynencBuilder
# External plugins register their builder methods here:
# Example: redis = "pynenc_redis.builder:RedisBuilderPlugin"
[tool.poetry.plugins."pynenc.plugins"]
# Core pynenc doesn't register any plugins
# This section serves as documentation for plugin developers


[tool.poetry.dependencies]
python = ">=3.11.6"
pyyaml = ">=6.0.1"
typing-extensions = "^4.9.0"
cistell = "0.0.7"
croniter = "^6.0.0"
# Optional dependencies for monitor
fastapi = { version = "^0.115.11", optional = true }
jinja2 = { version = ">=3.1.4,<4.0.0", optional = true }
python-multipart = { version = ">=0.0.6,<0.1.0", optional = true }
uvicorn = { version = "^0.34.0", optional = true }
jsonpickle = "^4.1.1"
# Optional dependencies for tests
pytest = { version = ">=8.2.0", optional = true }
pytest-asyncio = { version = "^0.25.3", optional = true }
pytest-timeout = { version = "^2.2.0", optional = true }
coverage = { version = ">=7.2.6,<8.0", optional = true, extras = ["toml"] }
mypy = { version = "1.7.0", optional = true }
types-PyYAML = { version = "6.0.12.12", optional = true }
pre-commit = { version = "^3.5.0", optional = true }
types-requests = { version = "^2.32.0.20250602", optional = true }
httpx = { version = "^0.27.0", optional = true }
requests = { version = "^2.32.0", optional = true }
psutil = { version = "^7.1.0", optional = true }


[tool.poetry.extras]
monitor = ["fastapi", "jinja2", "python-multipart", "uvicorn"]
tests = [
    "pytest",
    "pytest-asyncio",
    "pytest-timeout",
    "coverage",
    "mypy",
    "types-PyYAML",
    "pre-commit",
    "types-requests",
    "httpx",
    "requests",
    "psutil"
]


[tool.poetry.group.dev.dependencies]
black = "23.11.0"


[tool.poetry.group.docs]
optional = true


[tool.poetry.group.docs.dependencies]
sphinx = "^7.0"
myst-parser = "^2"
furo = "^2023"
sphinx-copybutton = "^0.5.2"
sphinx-design = "^0.5.0"
sphinx-inline-tabs = "^2023.4.21"
sphinx-autodoc2 = "^0.5.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.isort]
profile = "black"

[tool.black]
line-length = 88
target-version = ['py311']
required-version = '23.11.0'
exclude = '''
/(
    \.mypy_cache
    | \.env
    | \.venv
)/
'''


# [tool.flake8]
# max-line-length = 88
# exclude = [".venv", ".env", ".eggs"]
# ignore = [
#     "E203",  # Whitespace before ':' (conflicts with black)
#     "W503",  # Line break before binary operator (conflicts with black)
# ]

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    # "I",  # isort # using isort for now
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    # "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    # "W191", # indentation contains tabs
]

[tool.mypy]
files = ["pynenc"]
warn_unused_configs = true
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
exclude = 'venv,env'
show_error_codes = true
pretty = true
allow_redefinition = true
no_implicit_optional = true
strict_equality = true

# Add mypy module configuration for croniter
[[tool.mypy.overrides]]
module = "croniter.*"
ignore_missing_imports = true
follow_imports = "skip"

[tool.pytest.ini_options]
log_cli = true
filterwarnings = [
    "ignore:Running in a secondary thread. Signal handling will be skipped.:UserWarning",
    "ignore::pytest.PytestUnhandledThreadExceptionWarning",
]
timeout = 30

[tool.coverage.run]
omit = [
    "tests/*",  # Exclude all files in the tests directory
]
relative_files = true # to combine coverage data from multiple processes

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if (typing\\.)?TYPE_CHECKING:",
    "^\\s*\\.\\.\\.\\s*$",  # ... ellipsis
    "if __name__ == .__main__.:",
]
